[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "email-sftp-processor"
version = "0.1.0"
description = "Автоматизированная система обработки Excel-файлов из email-вложений с передачей на SFTP"
authors = [
    {name = "Email SFTP Processor Team"}
]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# =====================================
# Bandit Security Configuration
# =====================================
[tool.bandit]
# Исключаем директории тестов из проверки безопасности
exclude_dirs = ["tests", ".venv", "venv"]

# Пропускаем определенные виды проверок
skips = [
    "B101",  # Assert used - нормально для тестов
    "B603",  # subprocess_without_shell_equals_true - может быть нужно
]

# =====================================
# Black Code Formatter Configuration
# =====================================
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Исключаем определенные директории
  \.git
  | \.venv
  | venv
  | build
  | dist
)/
'''

# =====================================
# isort Import Sorter Configuration
# =====================================
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# =====================================
# MyPy Type Checker Configuration
# =====================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Модули без типизации
[[tool.mypy.overrides]]
module = [
    "imap_tools.*",
    "asyncssh.*",
    "prometheus_client.*",
    "pandas.*",
    "openpyxl.*"
]
ignore_missing_imports = true

# =====================================
# Ruff Linter Configuration
# =====================================
[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "RUF100", # unused noqa
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]  # assert false positive

# =====================================
# Pytest Configuration
# =====================================
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# =====================================
# Coverage Configuration
# =====================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
