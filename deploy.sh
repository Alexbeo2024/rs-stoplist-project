#!/bin/bash
# =====================================
# –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –î–ï–ü–õ–û–ô –ù–ê GITHUB
# =====================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ git
    if ! command -v git &> /dev/null; then
        log_error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub CLI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if ! command -v gh &> /dev/null; then
        log_warning "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi

    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
test_application() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ..."

    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose up -d
    sleep 10

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    if curl -f http://localhost:8000/health/live > /dev/null 2>&1; then
        log_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        log_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
        docker-compose logs app | tail -10
        exit 1
    fi

    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose down
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_github_repo() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if [ -z "$1" ]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, username/rs-stoplist-project): " REPO_NAME
    else
        REPO_NAME=$1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if git remote get-url origin > /dev/null 2>&1; then
        log_warning "Git remote origin —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        EXISTING_REMOTE=$(git remote get-url origin)
        log_info "–¢–µ–∫—É—â–∏–π remote: $EXISTING_REMOTE"
    else
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI
        if command -v gh &> /dev/null; then
            log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —á–µ—Ä–µ–∑ GitHub CLI..."
            gh repo create $REPO_NAME --public --description "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤ –∏–∑ email"
            git remote add origin https://github.com/$REPO_NAME.git
        else
            log_warning "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤—Ä—É—á–Ω—É—é –Ω–∞ GitHub: https://github.com/new"
            echo "–ó–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ remote:"
            echo "git remote add origin https://github.com/$REPO_NAME.git"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
        fi
    fi

    log_success "GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è GitHub
prepare_github_files() {
    log_info "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è GitHub..."

    # –°–æ–∑–¥–∞–Ω–∏–µ .gitignore –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f .gitignore ]; then
        cat > .gitignore << EOF
# Environment files
.env
.env.local
.env.production

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# Docker
.dockerignore

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Coverage
htmlcov/
.coverage
coverage.xml

# pytest
.pytest_cache/

# MyPy
.mypy_cache/

# Test files
test_data/
*.xlsx
*.csv
EOF
        log_success ".gitignore —Å–æ–∑–¥–∞–Ω"
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    REQUIRED_FILES=(
        ".github/workflows/ci.yml"
        ".devcontainer/devcontainer.json"
        "docker-compose.prod.yml"
        "env.example"
        "docs/deployment_guide.md"
    )

    for file in "${REQUIRED_FILES[@]}"; do
        if [ ! -f "$file" ]; then
            log_warning "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω"
        else
            log_success "–§–∞–π–ª $file –≥–æ—Ç–æ–≤"
        fi
    done
}

# –ö–æ–º–º–∏—Ç –∏ –ø—É—à –∏–∑–º–µ–Ω–µ–Ω–∏–π
commit_and_push() {
    log_info "–ö–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if [ -z "$(git status --porcelain)" ]; then
        log_warning "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
        return
    fi

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    git add .

    # –ö–æ–º–º–∏—Ç
    COMMIT_MESSAGE="feat: add comprehensive GitHub deployment configuration

- Add CI/CD pipeline with GitHub Actions
- Add Docker production configuration
- Add Codespaces development environment
- Add deployment documentation
- Add security scanning and monitoring
- Ready for production deployment"

    git commit -m "$COMMIT_MESSAGE"

    # –ü—É—à –≤ main –≤–µ—Ç–∫—É
    git branch -M main
    git push -u origin main

    log_success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
create_release() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–ª–∏–∑–∞..."

    VERSION="v1.0.0"

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
    git tag $VERSION
    git push origin $VERSION

    log_success "–†–µ–ª–∏–∑ $VERSION —Å–æ–∑–¥–∞–Ω"

    if command -v gh &> /dev/null; then
        gh release create $VERSION --title "Initial Production Release" --notes "
üöÄ **–ü–µ—Ä–≤—ã–π production-ready —Ä–µ–ª–∏–∑**

## –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
- ‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤
- ‚úÖ CI/CD pipeline —Å GitHub Actions
- ‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è
- ‚úÖ Health checks –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- ‚úÖ Security scanning
- ‚úÖ Production-ready –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ:
\`\`\`bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
git clone https://github.com/$REPO_NAME.git
cd rs-stoplist-project

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
cp env.example .env
# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª

# –ó–∞–ø—É—Å–∫
docker-compose -f docker-compose.prod.yml up -d
\`\`\`

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: [docs/deployment_guide.md](docs/deployment_guide.md)
"
        log_success "GitHub —Ä–µ–ª–∏–∑ —Å–æ–∑–¥–∞–Ω"
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
show_final_instructions() {
    echo ""
    echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ù–ê GITHUB –ó–ê–í–ï–†–®–ï–ù–û!"
    echo "=================================="
    echo ""
    echo "üìã –ß–¢–û –î–ê–õ–¨–®–ï:"
    echo ""
    echo "1. üîê –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub Repository Settings:"
    echo "   https://github.com/$REPO_NAME/settings/secrets/actions"
    echo ""
    echo "   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã:"
    echo "   - POSTGRES_PASSWORD"
    echo "   - EMAIL_USER"
    echo "   - EMAIL_PASS"
    echo "   - SECRET_KEY"
    echo ""
    echo "2. üöÄ GitHub Actions –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º push"
    echo ""
    echo "3. üåê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Codespaces:"
    echo "   https://github.com/$REPO_NAME/codespaces"
    echo ""
    echo "4. üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ CI/CD:"
    echo "   https://github.com/$REPO_NAME/actions"
    echo ""
    echo "5. üê≥ Docker –æ–±—Ä–∞–∑—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤:"
    echo "   https://github.com/$REPO_NAME/pkgs/container/rs-stoplist-project"
    echo ""
    echo "üìñ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/deployment_guide.md"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ù–ê GITHUB"
    echo "============================================"
    echo ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    REPO_NAME=$1

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤
    check_dependencies
    test_application
    setup_github_repo $REPO_NAME
    prepare_github_files
    commit_and_push
    create_release
    show_final_instructions

    echo ""
    log_success "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [repository-name]"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 username/rs-stoplist-project"
    echo "  $0  # –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
    echo ""
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:"
    echo "- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ"
    echo "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "- –°–æ–∑–¥–∞–µ—Ç CI/CD pipeline"
    echo "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Codespaces"
    echo "- –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑"
    exit 0
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main $1
