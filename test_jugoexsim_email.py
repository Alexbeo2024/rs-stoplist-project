#!/usr/bin/env python3
"""
–¢–µ—Å—Ç email –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã Jugoexsim (SSL)
"""

import smtplib
import imaplib
import ssl
import socket
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import getpass

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'

def log_info(message: str):
    print(f"{Colors.BLUE}[INFO]{Colors.NC} {message}")

def log_success(message: str):
    print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")

def log_warning(message: str):
    print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")

def log_error(message: str):
    print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")

def log_test(message: str):
    print(f"{Colors.PURPLE}[TEST]{Colors.NC} {message}")

class JugoexsimEmailTester:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Jugoexsim email"""

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Jugoexsim
        self.email_user = "aak@jugoexsim.rs"
        self.smtp_server = "smtp.jugoexsim.rs"
        self.smtp_port = 465  # SSL –ø–æ—Ä—Ç
        self.imap_server = "imap.jugoexsim.rs"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π
        self.imap_port = 993
        self.use_ssl = True
        self.use_tls = False

        log_info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Jugoexsim email:")
        log_info(f"  Email: {self.email_user}")
        log_info(f"  SMTP: {self.smtp_server}:{self.smtp_port} (SSL)")
        log_info(f"  IMAP: {self.imap_server}:{self.imap_port}")

    def test_server_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤...")

        # –¢–µ—Å—Ç SMTP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            log_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ SMTP {self.smtp_server}:{self.smtp_port}...")
            sock = socket.create_connection((self.smtp_server, self.smtp_port), timeout=10)
            sock.close()
            log_success("SMTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            log_error(f"SMTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

        # –¢–µ—Å—Ç IMAP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            log_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ IMAP {self.imap_server}:{self.imap_port}...")
            sock = socket.create_connection((self.imap_server, self.imap_port), timeout=10)
            sock.close()
            log_success("IMAP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            log_warning(f"IMAP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            log_warning("–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ IMAP")

        return True

    def test_smtp_ssl_connection(self, password: str):
        """–¢–µ—Å—Ç SMTP SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SSL SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            log_info("–°–æ–∑–¥–∞–Ω–∏–µ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
            context = ssl.create_default_context()

            # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
            # context.check_hostname = False
            # context.verify_mode = ssl.CERT_NONE

            log_info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.smtp_server}:{self.smtp_port}...")
            server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port, context=context)
            server.set_debuglevel(0)

            log_info("–û—Ç–ø—Ä–∞–≤–∫–∞ EHLO –∫–æ–º–∞–Ω–¥—ã...")
            server.ehlo()

            log_info("–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            server.login(self.email_user, password)

            log_success("SMTP SSL –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞
            if hasattr(server, 'esmtp_features') and server.esmtp_features:
                capabilities = list(server.esmtp_features.keys())
                log_info(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: {', '.join(capabilities)}")

            server.quit()
            return True

        except smtplib.SMTPAuthenticationError as e:
            log_error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            log_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ username –∏ password")
            return False
        except smtplib.SMTPConnectError as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP: {e}")
            return False
        except ssl.SSLError as e:
            log_error(f"SSL –æ—à–∏–±–∫–∞: {e}")
            log_warning("–ü–æ–ø—Ä–æ–±—É–µ–º —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
            return self.test_smtp_ssl_relaxed(password)
        except Exception as e:
            log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def test_smtp_ssl_relaxed(self, password: str):
        """SMTP —Ç–µ—Å—Ç —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π SSL –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            log_info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π SSL –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")

            # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE

            server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port, context=context)
            server.login(self.email_user, password)

            log_success("SMTP SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (relaxed mode)")
            server.quit()
            return True

        except Exception as e:
            log_error(f"–î–∞–∂–µ —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            return False

    def test_imap_connection(self, password: str):
        """–¢–µ—Å—Ç IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            log_info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IMAP {self.imap_server}:{self.imap_port}...")
            mail = imaplib.IMAP4_SSL(self.imap_server, self.imap_port)

            log_info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è IMAP...")
            mail.login(self.email_user, password)

            log_success("IMAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
            status, folders = mail.list()
            if status == 'OK':
                folder_count = len(folders)
                log_info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {folder_count}")

                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–ø–æ–∫
                for i, folder in enumerate(folders[:3]):
                    folder_name = folder.decode().split('"')[-2] if '"' in folder.decode() else folder.decode()
                    log_info(f"  {i+1}. {folder_name}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ INBOX
            status, messages = mail.select('INBOX')
            if status == 'OK':
                message_count = int(messages[0])
                log_info(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ INBOX: {message_count}")

            mail.close()
            mail.logout()
            return True

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ IMAP: {e}")

            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            alternative_servers = [
                "mail.jugoexsim.rs",
                "imap.jugoexsim.rs",
                "jugoexsim.rs"
            ]

            for alt_server in alternative_servers:
                if alt_server != self.imap_server:
                    log_warning(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π IMAP —Å–µ—Ä–≤–µ—Ä: {alt_server}")
                    try:
                        mail = imaplib.IMAP4_SSL(alt_server, self.imap_port)
                        mail.login(self.email_user, password)
                        log_success(f"IMAP —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ {alt_server}")
                        mail.logout()
                        return True
                    except:
                        continue

            return False

    def test_send_email(self, password: str):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email...")

        try:
            # SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = ssl.create_default_context()
            # –î–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è:
            # context.check_hostname = False
            # context.verify_mode = ssl.CERT_NONE

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = MIMEMultipart()
            msg['From'] = self.email_user
            msg['To'] = self.email_user  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
            msg['Subject'] = f"[TEST] Jugoexsim Email System - {datetime.now().strftime('%H:%M:%S')}"

            body = f"""
üß™ –¢–ï–°–¢ EMAIL –°–ò–°–¢–ï–ú–´ JUGOEXSIM

–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().isoformat()}
–°–µ—Ä–≤–µ—Ä: {self.smtp_server}:{self.smtp_port}
Email: {self.email_user}
–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: SSL

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ:
- SMTP SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
- Email —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ

üîó –ü—Ä–æ–µ–∫—Ç: Excel Processing System
GitHub: https://github.com/Alexbeo2024/rs-stoplist-project
            """

            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port, context=context)
            server.login(self.email_user, password)

            text = msg.as_string()
            server.sendmail(self.email_user, [self.email_user], text)
            server.quit()

            log_success("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            log_info(f"  –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {self.email_user}")
            log_info(f"  –†–∞–∑–º–µ—Ä: {len(text)} –±–∞–π—Ç")
            log_info("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É!")

            return True

        except ssl.SSLError as e:
            log_error(f"SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            log_info("–ü—Ä–æ–±—É–µ–º —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π SSL –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
            return self.test_send_email_relaxed(password)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False

    def test_send_email_relaxed(self, password: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π SSL –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        try:
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE

            msg = MIMEMultipart()
            msg['From'] = self.email_user
            msg['To'] = self.email_user
            msg['Subject'] = f"[TEST] Jugoexsim Email (Relaxed SSL) - {datetime.now().strftime('%H:%M:%S')}"

            body = "‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω–æ–π SSL –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)"
            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            server = smtplib.SMTP_SSL(self.smtp_server, self.smtp_port, context=context)
            server.login(self.email_user, password)
            server.sendmail(self.email_user, [self.email_user], msg.as_string())
            server.quit()

            log_success("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (relaxed SSL mode)")
            return True

        except Exception as e:
            log_error(f"–î–∞–∂–µ —Å relaxed SSL –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            return False

    def generate_config_for_app(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        log_info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        config = f"""
# =====================================
# JUGOEXSIM EMAIL CONFIGURATION
# =====================================

EMAIL_USER={self.email_user}
EMAIL_PASS=your_password_here

# SMTP Settings (SSL on port 465)
SMTP_SERVER={self.smtp_server}
SMTP_PORT={self.smtp_port}
EMAIL_USE_TLS=False
EMAIL_USE_SSL=True

# IMAP Settings
IMAP_SERVER={self.imap_server}
IMAP_PORT={self.imap_port}

# Additional settings for corporate email
EMAIL_TIMEOUT=30
EMAIL_SSL_VERIFY=False  # –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤

# Whitelist (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
EMAIL_ALLOWED_SENDERS=sender@jugoexsim.rs,another@jugoexsim.rs
        """

        with open('.env.jugoexsim_final', 'w') as f:
            f.write(config)

        log_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env.jugoexsim_final")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.CYAN}üìß –¢–ï–°–¢ EMAIL –°–ò–°–¢–ï–ú–´ JUGOEXSIM{Colors.NC}")
    print(f"{Colors.CYAN}–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞ —Å SSL (–ø–æ—Ä—Ç 465){Colors.NC}")
    print("=" * 50)

    tester = JugoexsimEmailTester()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
    print(f"\n{Colors.PURPLE}1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ï–†–û–í{Colors.NC}")
    if not tester.test_server_connectivity():
        log_error("–°–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
        return

    # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    print(f"\n{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {tester.email_user}:{Colors.NC}")
    password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")

    if not password:
        log_error("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    results = []

    # –¢–µ—Å—Ç SMTP
    print(f"\n{Colors.PURPLE}2. –¢–ï–°–¢ SMTP SSL –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
    smtp_result = tester.test_smtp_ssl_connection(password)
    results.append(("SMTP SSL", smtp_result))

    # –¢–µ—Å—Ç IMAP
    print(f"\n{Colors.PURPLE}3. –¢–ï–°–¢ IMAP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
    imap_result = tester.test_imap_connection(password)
    results.append(("IMAP", imap_result))

    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    if smtp_result:
        print(f"\n{Colors.PURPLE}4. –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò EMAIL{Colors.NC}")
        send_result = tester.test_send_email(password)
        results.append(("Send Email", send_result))
    else:
        log_warning("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å SMTP")
        results.append(("Send Email", False))

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{Colors.CYAN}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢{Colors.NC}")
    print("=" * 30)

    success_count = 0
    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}: {Colors.GREEN}–£–°–ü–ï–®–ù–û{Colors.NC}")
            success_count += 1
        else:
            print(f"‚ùå {test_name}: {Colors.RED}–û–®–ò–ë–ö–ê{Colors.NC}")

    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if success_count >= 2:  # SMTP + —á—Ç–æ-—Ç–æ –µ—â–µ
        log_success("üéâ Email —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        tester.generate_config_for_app()

        print(f"\n{Colors.BLUE}üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:{Colors.NC}")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env.jugoexsim_final –≤ .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ EMAIL_PASS")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ GitHub Secrets –¥–ª—è CI/CD")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up -d")

    else:
        log_warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print(f"\n{Colors.YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.NC}")
        print("‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å IT-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º Jugoexsim")
        print("‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ SMTP/IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall –∏ —Å–µ—Ç–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
