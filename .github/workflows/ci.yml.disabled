name: 🔍 Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =====================================
  # 1. ЛИНТИНГ И КАЧЕСТВО КОДА
  # =====================================
  code-quality:
    name: 📝 Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit[toml] black isort ruff mypy

      - name: 🖤 Code formatting (Black)
        run: black --check --diff src/ tests/

      - name: 📚 Import sorting (isort)
        run: isort --check-only --diff src/ tests/

      - name: ⚡ Fast linting (Ruff)
        run: ruff check src/ tests/

      - name: 🔍 Type checking (MyPy)
        run: mypy src/ --ignore-missing-imports

      - name: 🔒 Security scan (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json || echo "Bandit scan skipped"

      - name: 📊 Upload Bandit results
        if: always() && hashFiles('bandit-report.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-report.json

  # =====================================
  # 2. ТЕСТИРОВАНИЕ
  # =====================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: emailprocessor
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_DB: email_processor_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run unit tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: emailprocessor
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_DB: email_processor_db
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # =====================================
  # 3. DOCKER BUILD
  # =====================================
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker container
        run: |
          cat > .env.test << EOF
          POSTGRES_HOST=localhost
          POSTGRES_PORT=5432
          POSTGRES_USER=emailprocessor
          POSTGRES_PASSWORD=secure_password_123
          POSTGRES_DB=email_processor_db
          EMAIL_USER=test@example.com
          EMAIL_PASS=test_password
          SFTP_HOST=sftp
          SFTP_USER=sftpuser
          SFTP_PASS=pass
          TG_BOT_TOKEN=test_bot_token
          TG_CHAT_ID=test_chat_id
          SECRET_KEY=test-development-key
          ENVIRONMENT=test
          DEBUG=false
          EOF
          docker-compose -f docker-compose.yml up -d db
          sleep 10
          docker run --rm -d --name test-container \
            --network host \
            --env-file .env.test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 30
          curl -f http://localhost:8000/health/live || exit 1
          curl -f http://localhost:8000/metrics || exit 1
          docker stop test-container
          docker-compose down

  # =====================================
  # 4. SECURITY SCAN (Trivy)
  # =====================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📊 Upload Trivy scan results
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

