#!/usr/bin/env python3
"""
–¢–µ—Å—Ç SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel
"""

import paramiko
import socket
import os
import tempfile
import hashlib
from datetime import datetime
from typing import Optional, Dict, Any
import getpass
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'

def log_info(message: str):
    print(f"{Colors.BLUE}[INFO]{Colors.NC} {message}")

def log_success(message: str):
    print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")

def log_warning(message: str):
    print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")

def log_error(message: str):
    print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")

def log_test(message: str):
    print(f"{Colors.PURPLE}[TEST]{Colors.NC} {message}")

class SFTPTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""

    def __init__(self):
        self.host = None
        self.port = 22
        self.username = None
        self.password = None
        self.key_path = None
        self.remote_path = "/"
        self.use_key_auth = False

        log_info("SFTP Tester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def get_connection_details(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print(f"{Colors.CYAN}üìã –ù–ê–°–¢–†–û–ô–ö–ê SFTP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
        print("=" * 40)

        # –•–æ—Å—Ç
        self.host = input("üåê SFTP Host (–Ω–∞–ø—Ä–∏–º–µ—Ä: sftp.example.com): ").strip()
        if not self.host:
            log_error("Host –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False

        # –ü–æ—Ä—Ç
        port_input = input("üîå SFTP Port [22]: ").strip()
        if port_input:
            try:
                self.port = int(port_input)
            except ValueError:
                log_warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 22")
                self.port = 22

        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.username = input("üë§ Username: ").strip()
        if not self.username:
            log_error("Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False

        # –¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("\nüîê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print("1. –ü–∞—Ä–æ–ª—å")
        print("2. SSH –∫–ª—é—á")

        auth_choice = input("–í—ã–±–æ—Ä [1]: ").strip()

        if auth_choice == "2":
            self.use_key_auth = True
            self.key_path = input("üîë –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É: ").strip()
            if not self.key_path or not os.path.exists(self.key_path):
                log_error("–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            self.password = getpass.getpass("üîí Password: ")
            if not self.password:
                log_error("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return False

        # –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
        remote_input = input("üìÅ Remote path [/]: ").strip()
        if remote_input:
            self.remote_path = remote_input

        return True

    def test_network_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFTP —Å–µ—Ä–≤–µ—Ä–∞"""
        log_test(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {self.host}:{self.port}...")

        try:
            # –°–æ–∑–¥–∞–µ–º socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            sock = socket.create_connection((self.host, self.port), timeout=10)
            sock.close()
            log_success(f"–°–µ—Ä–≤–µ—Ä {self.host}:{self.port} –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except socket.timeout:
            log_error(f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.host}:{self.port}")
            return False
        except socket.gaierror as e:
            log_error(f"DNS –æ—à–∏–±–∫–∞: {e}")
            return False
        except ConnectionRefusedError:
            log_error(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º {self.host}:{self.port}")
            return False
        except Exception as e:
            log_error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    def test_ssh_connection(self):
        """–¢–µ—Å—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            # –°–æ–∑–¥–∞–µ–º SSH –∫–ª–∏–µ–Ω—Ç
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

            log_info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.username}@{self.host}:{self.port}...")

            if self.use_key_auth:
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
                log_info(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º: {self.key_path}")
                ssh.connect(
                    hostname=self.host,
                    port=self.port,
                    username=self.username,
                    key_filename=self.key_path,
                    timeout=30
                )
            else:
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–∞—Ä–æ–ª—é
                log_info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º...")
                ssh.connect(
                    hostname=self.host,
                    port=self.port,
                    username=self.username,
                    password=self.password,
                    timeout=30
                )

            log_success("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            stdin, stdout, stderr = ssh.exec_command('uname -a')
            server_info = stdout.read().decode().strip()
            if server_info:
                log_info(f"–°–µ—Ä–≤–µ—Ä: {server_info}")

            ssh.close()
            return True

        except paramiko.AuthenticationException:
            log_error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH")
            return False
        except paramiko.SSHException as e:
            log_error(f"SSH –æ—à–∏–±–∫–∞: {e}")
            return False
        except Exception as e:
            log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ SSH: {e}")
            return False

    def test_sftp_connection(self):
        """–¢–µ—Å—Ç SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            # –°–æ–∑–¥–∞–µ–º SSH —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            transport = paramiko.Transport((self.host, self.port))

            if self.use_key_auth:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                key = paramiko.RSAKey.from_private_key_file(self.key_path)
                transport.connect(username=self.username, pkey=key)
            else:
                transport.connect(username=self.username, password=self.password)

            log_success("SFTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # –°–æ–∑–¥–∞–µ–º SFTP –∫–ª–∏–µ–Ω—Ç
            sftp = paramiko.SFTPClient.from_transport(transport)
            log_success("SFTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            result = self.test_sftp_operations(sftp)

            sftp.close()
            transport.close()

            return result

        except Exception as e:
            log_error(f"SFTP –æ—à–∏–±–∫–∞: {e}")
            return False

    def test_sftp_operations(self, sftp: paramiko.SFTPClient):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö SFTP –æ–ø–µ—Ä–∞—Ü–∏–π"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SFTP –æ–ø–µ—Ä–∞—Ü–∏–π...")

        operations_passed = 0
        total_operations = 6

        try:
            # 1. –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            log_info("1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
            try:
                files = sftp.listdir(self.remote_path)
                log_success(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫")
                if files:
                    for i, file in enumerate(files[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        log_info(f"   {i+1}. {file}")
                    if len(files) > 5:
                        log_info(f"   ... –∏ –µ—â–µ {len(files)-5} —Ñ–∞–π–ª–æ–≤")
                operations_passed += 1
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ª–∏—Å—Ç–∏–Ω–≥–∞: {e}")

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            log_info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
            try:
                stat = sftp.stat(self.remote_path)
                log_success(f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {oct(stat.st_mode)}")
                operations_passed += 1
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è stat: {e}")

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏
            test_dir = f"{self.remote_path.rstrip('/')}/test_excel_processor_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            log_info("3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–∞–ø–∫–∏...")
            try:
                sftp.mkdir(test_dir)
                log_success(f"–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {test_dir}")
                operations_passed += 1
            except Exception as e:
                log_warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")
                test_dir = self.remote_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É

            # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            log_info("4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...")
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
                test_content = f"""ID,Name,Email,Status,Date
1,Test User 1,test1@example.com,active,{datetime.now().isoformat()}
2,Test User 2,test2@example.com,inactive,{datetime.now().isoformat()}
3,Test User 3,test3@example.com,active,{datetime.now().isoformat()}
"""

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as tmp_file:
                    tmp_file.write(test_content)
                    local_path = tmp_file.name

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                remote_file = f"{test_dir}/RS_stoplist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
                sftp.put(local_path, remote_file)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                remote_stat = sftp.stat(remote_file)
                local_size = os.path.getsize(local_path)

                if remote_stat.st_size == local_size:
                    log_success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {remote_file} ({remote_stat.st_size} –±–∞–π—Ç)")
                    operations_passed += 1
                else:
                    log_error(f"–†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {local_size} != {remote_stat.st_size}")

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(local_path)

            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

            # 5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
            log_info("5. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞...")
            try:
                if 'remote_file' in locals():
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as tmp_download:
                        download_path = tmp_download.name

                    sftp.get(remote_file, download_path)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    with open(download_path, 'r') as f:
                        downloaded_content = f.read()

                    if "Test User 1" in downloaded_content:
                        log_success("–§–∞–π–ª —Å–∫–∞—á–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        operations_passed += 1
                    else:
                        log_error("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

                    # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(download_path)

            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

            # 6. –û—á–∏—Å—Ç–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            log_info("6. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            try:
                if 'remote_file' in locals():
                    sftp.remove(remote_file)
                    log_info("–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

                if test_dir != self.remote_path:
                    sftp.rmdir(test_dir)
                    log_info("–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

                log_success("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                operations_passed += 1

            except Exception as e:
                log_warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

        except Exception as e:
            log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")

        # –ò—Ç–æ–≥–∏
        log_info(f"–û–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {operations_passed}/{total_operations}")

        if operations_passed >= 4:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            log_success("SFTP –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            log_warning("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ SFTP –æ–ø–µ—Ä–∞—Ü–∏—è—Ö")
            return False

    def generate_sftp_config(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SFTP –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        log_info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SFTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        config = f"""
# =====================================
# SFTP CONFIGURATION
# =====================================

SFTP_HOST={self.host}
SFTP_PORT={self.port}
SFTP_USER={self.username}
"""

        if self.use_key_auth:
            config += f"""SFTP_KEY_PATH={self.key_path}
SFTP_AUTH_METHOD=key
"""
        else:
            config += f"""SFTP_PASS=your_sftp_password_here
SFTP_AUTH_METHOD=password
"""

        config += f"""
SFTP_REMOTE_PATH={self.remote_path}
SFTP_TIMEOUT=30
SFTP_RETRY_ATTEMPTS=3
SFTP_RETRY_DELAY=5

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SFTP_VERIFY_UPLOAD=True
SFTP_CREATE_DIRECTORIES=True
SFTP_COMPRESSION=False
"""

        config_file = ".env.sftp_config"
        with open(config_file, 'w') as f:
            f.write(config)

        log_success(f"SFTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {config_file}")
        return config_file

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.CYAN}üìÅ –¢–ï–°–¢ SFTP –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
    print(f"{Colors.CYAN}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel{Colors.NC}")
    print("=" * 50)

    tester = SFTPTester()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not tester.get_connection_details():
        log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return 1

    print(f"\n{Colors.BLUE}üìã –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:{Colors.NC}")
    print(f"  Host: {tester.host}:{tester.port}")
    print(f"  User: {tester.username}")
    print(f"  Auth: {'SSH Key' if tester.use_key_auth else 'Password'}")
    print(f"  Path: {tester.remote_path}")

    results = []

    # –¢–µ—Å—Ç 1: –°–µ—Ç–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    print(f"\n{Colors.PURPLE}1. –ü–†–û–í–ï–†–ö–ê –°–ï–¢–ï–í–û–ô –î–û–°–¢–£–ü–ù–û–°–¢–ò{Colors.NC}")
    network_result = tester.test_network_connectivity()
    results.append(("Network", network_result))

    if not network_result:
        log_error("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç.")
        return 1

    # –¢–µ—Å—Ç 2: SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print(f"\n{Colors.PURPLE}2. –¢–ï–°–¢ SSH –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
    ssh_result = tester.test_ssh_connection()
    results.append(("SSH", ssh_result))

    if not ssh_result:
        log_error("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return 1

    # –¢–µ—Å—Ç 3: SFTP –æ–ø–µ—Ä–∞—Ü–∏–∏
    print(f"\n{Colors.PURPLE}3. –¢–ï–°–¢ SFTP –û–ü–ï–†–ê–¶–ò–ô{Colors.NC}")
    sftp_result = tester.test_sftp_connection()
    results.append(("SFTP Operations", sftp_result))

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{Colors.CYAN}üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢{Colors.NC}")
    print("=" * 30)

    success_count = 0
    for test_name, result in results:
        if result:
            print(f"‚úÖ {test_name}: {Colors.GREEN}–£–°–ü–ï–®–ù–û{Colors.NC}")
            success_count += 1
        else:
            print(f"‚ùå {test_name}: {Colors.RED}–û–®–ò–ë–ö–ê{Colors.NC}")

    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

    if success_count == len(results):
        log_success("üéâ SFTP —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_file = tester.generate_sftp_config()

        print(f"\n{Colors.BLUE}üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:{Colors.NC}")
        print(f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ {config_file} –≤ .env")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å/–∫–ª—é—á –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è")
        print("3. –û–±–Ω–æ–≤–∏—Ç–µ docker-compose.yml —Å SFTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ docker-compose up -d")
        print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É Excel —Ñ–∞–π–ª–æ–≤")

        return 0
    else:
        log_warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SFTP")

        print(f"\n{Colors.YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.NC}")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞")
        print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ")
        print("‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º SFTP —Å–µ—Ä–≤–µ—Ä–∞")

        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        exit(exit_code)
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.NC}")
        exit(130)
    except Exception as e:
        print(f"\n{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.NC}")
        exit(1)
