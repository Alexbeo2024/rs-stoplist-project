#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
import time
import requests
from typing import Dict, Any

def test_basic_connectivity():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")

    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    try:
        response = requests.get("http://localhost:8000", timeout=5)
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç: HTTP {response.status_code}")
        if response.status_code == 200:
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}...")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (Connection Error)")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_health_checks():
    """–¢–µ—Å—Ç health check endpoints"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health checks...")

    endpoints = {
        "/health/live": "Liveness Probe",
        "/health/ready": "Readiness Probe",
        "/health/detailed": "Detailed Health Check"
    }

    results = {}
    for endpoint, description in endpoints.items():
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=10)
            results[endpoint] = {
                "status_code": response.status_code,
                "working": response.status_code in [200, 204],
                "response": response.text[:200] if response.text else "No content"
            }

            if results[endpoint]["working"]:
                print(f"‚úÖ {description}: HTTP {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  {description}: HTTP {response.status_code}")

        except Exception as e:
            results[endpoint] = {"status_code": None, "working": False, "error": str(e)}
            print(f"‚ùå {description}: {e}")

    return results

def test_metrics_endpoint():
    """–¢–µ—Å—Ç Prometheus –º–µ—Ç—Ä–∏–∫"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...")

    try:
        response = requests.get("http://localhost:8000/metrics", timeout=5)
        if response.status_code == 200:
            metrics_content = response.text
            metrics_count = len([line for line in metrics_content.split('\n') if line and not line.startswith('#')])
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {metrics_count} –º–µ—Ç—Ä–∏–∫")

            # –ü–æ–∏—Å–∫ –Ω–∞—à–∏—Ö –º–µ—Ç—Ä–∏–∫
            our_metrics = [
                "emails_processed_total",
                "files_converted_total",
                "sftp_uploads_total",
                "app_info"
            ]

            found_metrics = []
            for metric in our_metrics:
                if metric in metrics_content:
                    found_metrics.append(metric)

            print(f"   –ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–∏—Ö –º–µ—Ç—Ä–∏–∫: {len(found_metrics)}/{len(our_metrics)}")
            for metric in found_metrics:
                print(f"   ‚úì {metric}")

            return True
        else:
            print(f"‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: HTTP {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return False

def test_database_connectivity():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")

    try:
        import subprocess
        result = subprocess.run([
            "docker-compose", "exec", "-T", "db",
            "pg_isready", "-U", "emailprocessor"
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            print("‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def test_container_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")

    try:
        import subprocess
        result = subprocess.run([
            "docker-compose", "ps", "--format", "table"
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            print("–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if 'email_processor' in line:
                    if 'Up' in line or 'healthy' in line:
                        print(f"‚úÖ {line}")
                    else:
                        print(f"‚ö†Ô∏è {line}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {result.stderr}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    print("=" * 60)

    # –°—á–µ—Ç—á–∏–∫–∏
    total_tests = 0
    passed_tests = 0

    # –¢–µ—Å—Ç 1: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    total_tests += 1
    if test_container_status():
        passed_tests += 1

    # –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    total_tests += 1
    if test_database_connectivity():
        passed_tests += 1

    # –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(10)

    # –¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    total_tests += 1
    if test_basic_connectivity():
        passed_tests += 1

    # –¢–µ—Å—Ç 4: Health checks (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç)
    if passed_tests >= 2:  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –ë–î —Ä–∞–±–æ—Ç–∞—é—Ç
        total_tests += 1
        health_results = test_health_checks()
        if any(result.get("working", False) for result in health_results.values()):
            passed_tests += 1

    # –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏
    total_tests += 1
    if test_metrics_endpoint():
        passed_tests += 1

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0

    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

    if success_rate >= 80:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print("- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8000")
        print("- Health Check: http://localhost:8000/health/detailed")
        print("- API Docs: http://localhost:8000/docs")
        print("- –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:8000/metrics")
        print("- Adminer (–ë–î): http://localhost:8080")
        return 0
    elif success_rate >= 50:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢ - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs app")
        return 1
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        return 2

if __name__ == "__main__":
    sys.exit(main())
