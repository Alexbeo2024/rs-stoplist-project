#!/bin/bash
# =====================================
# –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =====================================

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

echo "üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
echo "=============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
wait_for_service() {
    local url=$1
    local timeout=${2:-60}
    local count=0

    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞: $url"

    while [ $count -lt $timeout ]; do
        if curl -s -f "$url" > /dev/null 2>&1; then
            return 0
        fi
        sleep 2
        count=$((count + 2))
        echo -n "."
    done
    echo ""
    return 1
}

# =====================================
# 1. –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø
# =====================================
echo ""
log_info "1. –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø"
echo "-------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi
log_success "Docker: $(docker --version)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi
log_success "Docker Compose: $(docker-compose --version)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    log_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi
log_success ".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
available_space=$(df . | tail -1 | awk '{print $4}')
if [ $available_space -lt 1000000 ]; then  # –ú–µ–Ω—å—à–µ 1GB
    log_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: $(df -h . | tail -1 | awk '{print $4}')"
else
    log_success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: $(df -h . | tail -1 | awk '{print $4}')"
fi

# =====================================
# 2. –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# =====================================
echo ""
log_info "2. –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
echo "-------------------"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose down -v --remove-orphans > /dev/null 2>&1 || true

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
if docker-compose build --no-cache > build.log 2>&1; then
    log_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ build.log"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if docker-compose up -d > startup.log 2>&1; then
    log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
else
    log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ startup.log"
    exit 1
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
sleep 10

# =====================================
# 3. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# =====================================
echo ""
log_info "3. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ö–û–ù–¢–ï–ô–ù–ï–†–û–í"
echo "------------------------------"

containers_status=$(docker-compose ps --format table)
echo "$containers_status"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
failed_containers=0
for service in app db sftp; do
    if docker-compose ps -q $service | xargs docker inspect --format '{{.State.Status}}' | grep -q "running"; then
        log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service: RUNNING"
    else
        log_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $service: –ù–ï –ó–ê–ü–£–©–ï–ù"
        failed_containers=$((failed_containers + 1))
    fi
done

if [ $failed_containers -gt 0 ]; then
    log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:"
    echo "docker-compose logs"
    exit 1
fi

# =====================================
# 4. –ü–†–û–í–ï–†–ö–ê HEALTH CHECKS
# =====================================
echo ""
log_info "4. –ü–†–û–í–ï–†–ö–ê HEALTH CHECKS"
echo "------------------------"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if wait_for_service "http://localhost:8000" 120; then
    log_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
else
    log_error "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç"
    docker-compose logs app | tail -20
    exit 1
fi

# Liveness check
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ liveness probe..."
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health/live | grep -q "204"; then
    log_success "Liveness check: OK"
else
    log_error "Liveness check: FAILED"
fi

# Readiness check
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ readiness probe..."
readiness_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health/ready)
if [ "$readiness_code" = "204" ]; then
    log_success "Readiness check: OK - –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã"
elif [ "$readiness_code" = "503" ]; then
    log_warning "Readiness check: DEGRADED - –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
    curl -s http://localhost:8000/health/detailed | jq -r '.dependencies' 2>/dev/null || echo "Detailed info –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    log_error "Readiness check: FAILED (HTTP $readiness_code)"
fi

# Detailed health check
log_info "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞..."
if curl -s http://localhost:8000/health/detailed > health_detailed.json; then
    if command -v jq &> /dev/null; then
        echo "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:"
        jq -r '.status' health_detailed.json 2>/dev/null || cat health_detailed.json
        echo ""
        echo "–°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:"
        jq -r '.dependencies | to_entries[] | "\(.key): \(.value.status)"' health_detailed.json 2>/dev/null || echo "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON"
    else
        log_warning "jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞—é raw JSON:"
        cat health_detailed.json
    fi
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
fi

# =====================================
# 5. –ü–†–û–í–ï–†–ö–ê API ENDPOINTS
# =====================================
echo ""
log_info "5. –ü–†–û–í–ï–†–ö–ê API ENDPOINTS"
echo "------------------------"

# Root endpoint
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint..."
root_response=$(curl -s http://localhost:8000/)
if echo "$root_response" | grep -q "Service is running"; then
    log_success "Root endpoint (/): OK"
    echo "–û—Ç–≤–µ—Ç: $root_response"
else
    log_error "Root endpoint (/): FAILED"
fi

# Metrics endpoint
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ metrics endpoint..."
if curl -s http://localhost:8000/metrics | head -5 | grep -q "#"; then
    log_success "Metrics endpoint (/metrics): OK"
    metrics_count=$(curl -s http://localhost:8000/metrics | grep -c "^[a-z]" || echo "0")
    echo "–ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–∏–∫: $metrics_count"
else
    log_error "Metrics endpoint (/metrics): FAILED"
fi

# =====================================
# 6. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
# =====================================
echo ""
log_info "6. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•"
echo "----------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
if docker-compose exec -T db pg_isready -U emailprocessor > /dev/null 2>&1; then
    log_success "PostgreSQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    table_count=$(docker-compose exec -T db psql -U emailprocessor -d email_processor_db -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | xargs || echo "0")
    if [ "$table_count" -gt 0 ]; then
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: $table_count"
    else
        log_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã)"
    fi
else
    log_error "PostgreSQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ FAILED"
fi

# =====================================
# 7. –ü–†–û–í–ï–†–ö–ê SFTP
# =====================================
echo ""
log_info "7. –ü–†–û–í–ï–†–ö–ê SFTP –°–ï–†–í–ï–†–ê"
echo "-----------------------"

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ SFTP
sleep 5

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SFTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if echo "ls" | timeout 10 sftp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P 2222 sftpuser@localhost > /dev/null 2>&1; then
    log_success "SFTP: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK"
else
    log_warning "SFTP: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ FAILED (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è)"
fi

# =====================================
# 8. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í
# =====================================
echo ""
log_info "8. –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
echo "-------------------------"

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
recent_logs=$(docker-compose logs app --since 30s 2>/dev/null || echo "")

if [ -n "$recent_logs" ]; then
    error_count=$(echo "$recent_logs" | grep -ci error || echo "0")
    warning_count=$(echo "$recent_logs" | grep -ci warning || echo "0")
    info_count=$(echo "$recent_logs" | grep -ci info || echo "0")

    echo "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥:"
    echo "- INFO —Å–æ–æ–±—â–µ–Ω–∏–π: $info_count"
    echo "- WARNING —Å–æ–æ–±—â–µ–Ω–∏–π: $warning_count"
    echo "- ERROR —Å–æ–æ–±—â–µ–Ω–∏–π: $error_count"

    if [ "$error_count" -gt 0 ]; then
        log_warning "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
        echo "$recent_logs" | grep -i error | tail -3
    fi
else
    log_warning "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã"
fi

# =====================================
# 9. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# =====================================
echo ""
log_info "9. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"
echo "-----------------------------"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞
log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞..."
if command -v python3 &> /dev/null; then
    python3 -c "
import pandas as pd
import os
data = {'ID': [1, 2, 3], 'Name': ['Test1', 'Test2', 'Test3'], 'Value': [100, 200, 300]}
df = pd.DataFrame(data)
os.makedirs('test_data', exist_ok=True)
df.to_excel('test_data/test_file.xlsx', index=False)
print('–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: test_data/test_file.xlsx')
" 2>/dev/null && log_success "–¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω" || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"
else
    log_warning "Python3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"
fi

# =====================================
# 10. –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# =====================================
echo ""
log_info "10. –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
echo "=================================="

echo ""
echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"
echo "========================="

# –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
total_tests=0
passed_tests=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
echo ""
echo "üîç –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:"

# Docker
total_tests=$((total_tests + 1))
if command -v docker &> /dev/null; then
    echo "‚úÖ Docker: OK"
    passed_tests=$((passed_tests + 1))
else
    echo "‚ùå Docker: FAILED"
fi

# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
total_tests=$((total_tests + 1))
if curl -s -f http://localhost:8000 > /dev/null 2>&1; then
    echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: OK"
    passed_tests=$((passed_tests + 1))
else
    echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: FAILED"
fi

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
total_tests=$((total_tests + 1))
if docker-compose exec -T db pg_isready -U emailprocessor > /dev/null 2>&1; then
    echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK"
    passed_tests=$((passed_tests + 1))
else
    echo "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: FAILED"
fi

# API
total_tests=$((total_tests + 1))
if curl -s http://localhost:8000/health/live | grep -q "204\|200"; then
    echo "‚úÖ API Health Check: OK"
    passed_tests=$((passed_tests + 1))
else
    echo "‚ùå API Health Check: FAILED"
fi

# –ú–µ—Ç—Ä–∏–∫–∏
total_tests=$((total_tests + 1))
if curl -s http://localhost:8000/metrics | grep -q "#"; then
    echo "‚úÖ Prometheus –ú–µ—Ç—Ä–∏–∫–∏: OK"
    passed_tests=$((passed_tests + 1))
else
    echo "‚ùå Prometheus –ú–µ—Ç—Ä–∏–∫–∏: FAILED"
fi

echo ""
echo "üìà –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "=================="
echo "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $passed_tests –∏–∑ $total_tests"

percentage=$((passed_tests * 100 / total_tests))
if [ $percentage -ge 80 ]; then
    log_success "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û ($percentage%)"
    echo ""
    echo "üéâ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!"
    echo ""
    echo "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
    echo "- –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:8000"
    echo "- Health Check: http://localhost:8000/health/detailed"
    echo "- API Docs: http://localhost:8000/docs"
    echo "- –ú–µ—Ç—Ä–∏–∫–∏: http://localhost:8000/metrics"
    echo "- Adminer (–ë–î): http://localhost:8080"
elif [ $percentage -ge 60 ]; then
    log_warning "–ß–ê–°–¢–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–¨ ($percentage%)"
    echo "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
else
    log_error "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ ($percentage%)"
    echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"
fi

echo ""
echo "üìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:"
echo "================"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
echo "2. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: docker-compose down"
echo "3. –î–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: docker-compose down -v"
echo "4. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/user_guide.md"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
echo ""
log_info "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã:"
echo "- health_detailed.json - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
echo "- build.log - –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏"
echo "- startup.log - –ª–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞"

echo ""
echo "üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û"
