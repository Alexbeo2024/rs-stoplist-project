#!/usr/bin/env python3
"""
Comprehensive Email & SMTP Testing Script
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –∏ SMTP —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ .env
"""

import asyncio
import os
import smtplib
import imaplib
import email
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from typing import Dict, Any, List, Tuple
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent / "src"))

try:
    from infrastructure.email.email_reader import EmailReader
    from infrastructure.notifications.email_sender import EmailSender
    EMAIL_MODULES_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
    EMAIL_MODULES_AVAILABLE = False

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'  # No Color

def log_info(message: str):
    print(f"{Colors.BLUE}[INFO]{Colors.NC} {message}")

def log_success(message: str):
    print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")

def log_warning(message: str):
    print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")

def log_error(message: str):
    print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")

def log_test(message: str):
    print(f"{Colors.PURPLE}[TEST]{Colors.NC} {message}")

class EmailSMTPTester:
    """Comprehensive Email & SMTP Tester"""

    def __init__(self):
        self.load_config()
        self.test_results: List[Dict[str, Any]] = []

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        log_info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞...")

        # –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
        env_file = Path(".env")
        if env_file.exists():
            with open(env_file, 'r') as f:
                for line in f:
                    if '=' in line and not line.strip().startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value

        # Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.email_user = os.getenv('EMAIL_USER', 'test@example.com')
        self.email_pass = os.getenv('EMAIL_PASS', 'test_password')

        # SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–æ–º–µ–Ω—É email)
        if 'gmail.com' in self.email_user:
            self.smtp_server = 'smtp.gmail.com'
            self.smtp_port = 587
            self.imap_server = 'imap.gmail.com'
            self.imap_port = 993
        elif 'outlook.com' in self.email_user or 'hotmail.com' in self.email_user:
            self.smtp_server = 'smtp.live.com'
            self.smtp_port = 587
            self.imap_server = 'imap.live.com'
            self.imap_port = 993
        elif 'yahoo.com' in self.email_user:
            self.smtp_server = 'smtp.mail.yahoo.com'
            self.smtp_port = 587
            self.imap_server = 'imap.mail.yahoo.com'
            self.imap_port = 993
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–æ—á—Ç–∞
            self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            self.smtp_port = int(os.getenv('SMTP_PORT', 587))
            self.imap_server = os.getenv('IMAP_SERVER', 'imap.gmail.com')
            self.imap_port = int(os.getenv('IMAP_PORT', 993))

        log_success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
        log_info(f"  Email: {self.email_user}")
        log_info(f"  SMTP: {self.smtp_server}:{self.smtp_port}")
        log_info(f"  IMAP: {self.imap_server}:{self.imap_port}")

    def test_smtp_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        result = {
            'test': 'SMTP Connection',
            'status': 'UNKNOWN',
            'details': {},
            'timestamp': datetime.now().isoformat()
        }

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.set_debuglevel(0)  # –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞

            # STARTTLS –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            server.starttls()
            result['details']['starttls'] = 'SUCCESS'

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            server.login(self.email_user, self.email_pass)
            result['details']['authentication'] = 'SUCCESS'

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–µ—Ä–∞
            capabilities = server.esmtp_features
            result['details']['capabilities'] = list(capabilities.keys()) if capabilities else []

            server.quit()

            result['status'] = 'SUCCESS'
            log_success("SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            log_info(f"  –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞: {', '.join(result['details']['capabilities'])}")

        except smtplib.SMTPAuthenticationError as e:
            result['status'] = 'AUTH_FAILED'
            result['details']['error'] = str(e)
            log_error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}")
            log_warning("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASS –≤ .env —Ñ–∞–π–ª–µ")

        except smtplib.SMTPConnectError as e:
            result['status'] = 'CONNECTION_FAILED'
            result['details']['error'] = str(e)
            log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP: {e}")

        except Exception as e:
            result['status'] = 'ERROR'
            result['details']['error'] = str(e)
            log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ SMTP: {e}")

        return result

    def test_imap_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        result = {
            'test': 'IMAP Connection',
            'status': 'UNKNOWN',
            'details': {},
            'timestamp': datetime.now().isoformat()
        }

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            mail = imaplib.IMAP4_SSL(self.imap_server, self.imap_port)

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            mail.login(self.email_user, self.email_pass)
            result['details']['authentication'] = 'SUCCESS'

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
            status, folders = mail.list()
            if status == 'OK':
                folder_list = [folder.decode().split('"')[-2] for folder in folders]
                result['details']['folders'] = folder_list
                log_info(f"  –ù–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏: {', '.join(folder_list[:5])}{'...' if len(folder_list) > 5 else ''}")

            # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ INBOX
            status, messages = mail.select('INBOX')
            if status == 'OK':
                message_count = int(messages[0])
                result['details']['inbox_messages'] = message_count
                log_info(f"  –°–æ–æ–±—â–µ–Ω–∏–π –≤ INBOX: {message_count}")

            mail.close()
            mail.logout()

            result['status'] = 'SUCCESS'
            log_success("IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

        except imaplib.IMAP4.error as e:
            result['status'] = 'AUTH_FAILED'
            result['details']['error'] = str(e)
            log_error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ IMAP: {e}")

        except Exception as e:
            result['status'] = 'ERROR'
            result['details']['error'] = str(e)
            log_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ IMAP: {e}")

        return result

    def test_send_email(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ email...")

        result = {
            'test': 'Send Email',
            'status': 'UNKNOWN',
            'details': {},
            'timestamp': datetime.now().isoformat()
        }

        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = MIMEMultipart()
            msg['From'] = self.email_user
            msg['To'] = self.email_user  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
            msg['Subject'] = f"[TEST] Email System Check - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

            # –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            body = f"""
üß™ TEST EMAIL FROM RS-STOPLIST-PROJECT

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ email —Å–∏—Å—Ç–µ–º—ã.

üìä –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∞:
- –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.now().isoformat()}
- SMTP Server: {self.smtp_server}:{self.smtp_port}
- Email User: {self.email_user}
- Test Type: Automated System Check

‚úÖ –ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, email —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

üîó GitHub: https://github.com/Alexbeo2024/rs-stoplist-project
            """

            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(self.email_user, self.email_pass)

            text = msg.as_string()
            server.sendmail(self.email_user, [self.email_user], text)
            server.quit()

            result['status'] = 'SUCCESS'
            result['details']['recipient'] = self.email_user
            result['details']['subject'] = msg['Subject']
            result['details']['message_size'] = len(text)

            log_success("Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            log_info(f"  –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {self.email_user}")
            log_info(f"  –¢–µ–º–∞: {msg['Subject']}")
            log_info(f"  –†–∞–∑–º–µ—Ä: {len(text)} –±–∞–π—Ç")

        except Exception as e:
            result['status'] = 'ERROR'
            result['details']['error'] = str(e)
            log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

        return result

    async def test_email_modules(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –Ω–∞—à–∏—Ö email –º–æ–¥—É–ª–µ–π"""
        log_test("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        result = {
            'test': 'Application Email Modules',
            'status': 'UNKNOWN',
            'details': {},
            'timestamp': datetime.now().isoformat()
        }

        if not EMAIL_MODULES_AVAILABLE:
            result['status'] = 'SKIPPED'
            result['details']['reason'] = 'Email modules not available'
            log_warning("–ú–æ–¥—É–ª–∏ email –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
            return result

        try:
            # –¢–µ—Å—Ç EmailReader
            log_info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EmailReader...")

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            # (—Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DI container)

            result['status'] = 'SUCCESS'
            result['details']['modules_found'] = ['EmailReader', 'EmailSender']
            log_success("Email –º–æ–¥—É–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")

        except Exception as e:
            result['status'] = 'ERROR'
            result['details']['error'] = str(e)
            log_error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π: {e}")

        return result

    def test_email_providers_guide(self) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö email –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        log_test("–ê–Ω–∞–ª–∏–∑ email –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        result = {
            'test': 'Email Provider Analysis',
            'status': 'INFO',
            'details': {},
            'timestamp': datetime.now().isoformat()
        }

        domain = self.email_user.split('@')[1] if '@' in self.email_user else 'unknown'
        result['details']['domain'] = domain
        result['details']['detected_provider'] = 'unknown'

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if 'gmail.com' in domain:
            result['details']['detected_provider'] = 'Google Gmail'
            result['details']['recommendations'] = [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è",
                "–í–∫–ª—é—á–∏—Ç–µ 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Google –∞–∫–∫–∞—É–Ω—Ç–∞",
                "–°–æ–∑–¥–∞–π—Ç–µ App Password: https://myaccount.google.com/apppasswords",
                "SMTP: smtp.gmail.com:587, IMAP: imap.gmail.com:993"
            ]
        elif 'outlook.com' in domain or 'hotmail.com' in domain:
            result['details']['detected_provider'] = 'Microsoft Outlook'
            result['details']['recommendations'] = [
                "–í–∫–ª—é—á–∏—Ç–µ IMAP –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Outlook",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ App Password",
                "SMTP: smtp.live.com:587, IMAP: imap.live.com:993"
            ]
        elif 'yahoo.com' in domain:
            result['details']['detected_provider'] = 'Yahoo Mail'
            result['details']['recommendations'] = [
                "–°–æ–∑–¥–∞–π—Ç–µ App Password –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Yahoo",
                "–í–∫–ª—é—á–∏—Ç–µ IMAP –¥–æ—Å—Ç—É–ø",
                "SMTP: smtp.mail.yahoo.com:587, IMAP: imap.mail.yahoo.com:993"
            ]
        else:
            result['details']['detected_provider'] = 'Custom/Corporate'
            result['details']['recommendations'] = [
                "–£—Ç–æ—á–Ω–∏—Ç–µ SMTP/IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                "–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ",
                "–î–æ–±–∞–≤—å—Ç–µ SMTP_SERVER, SMTP_PORT, IMAP_SERVER, IMAP_PORT –≤ .env"
            ]

        log_info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {result['details']['detected_provider']}")
        log_info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in result['details']['recommendations']:
            log_info(f"  ‚Ä¢ {rec}")

        return result

    def generate_env_template(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ .env —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        template = f"""# =====================================
# EMAIL CONFIGURATION FOR PRODUCTION
# =====================================

# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
EMAIL_USER={self.email_user}
EMAIL_PASS=your-email-password-or-app-password

# SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –¥–æ–º–µ–Ω—É email)
SMTP_SERVER={self.smtp_server}
SMTP_PORT={self.smtp_port}

# IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º)
IMAP_SERVER={self.imap_server}
IMAP_PORT={self.imap_port}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
EMAIL_USE_TLS=true
EMAIL_TIMEOUT=30

# Whitelist –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
EMAIL_ALLOWED_SENDERS=sender@domain.com,another@domain.com

# Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
TG_BOT_TOKEN=your-telegram-bot-token
TG_CHAT_ID=your-telegram-chat-id

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...
POSTGRES_HOST=db
POSTGRES_PORT=5432
POSTGRES_USER=emailprocessor
POSTGRES_PASSWORD=your_secure_password_123
POSTGRES_DB=email_processor_db
"""
        return template

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        log_info("üß™ –ù–∞—á–∏–Ω–∞–µ–º comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Email & SMTP...")
        print("=" * 60)

        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("Email Provider Analysis", self.test_email_providers_guide),
            ("SMTP Connection", self.test_smtp_connection),
            ("IMAP Connection", self.test_imap_connection),
            ("Send Test Email", self.test_send_email),
            ("Application Modules", self.test_email_modules),
        ]

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        for test_name, test_func in tests:
            print(f"\n{Colors.CYAN}{'=' * 20} {test_name} {'=' * 20}{Colors.NC}")

            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()

            self.test_results.append(result)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()

    def print_final_report(self):
        """–ü–µ—á–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{Colors.CYAN}{'=' * 60}{Colors.NC}")
        print(f"{Colors.CYAN}üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Colors.NC}")
        print(f"{Colors.CYAN}{'=' * 60}{Colors.NC}")

        success_count = 0
        total_count = len(self.test_results)

        for result in self.test_results:
            status = result['status']
            test_name = result['test']

            if status == 'SUCCESS':
                print(f"‚úÖ {test_name}: {Colors.GREEN}–£–°–ü–ï–®–ù–û{Colors.NC}")
                success_count += 1
            elif status == 'INFO':
                print(f"‚ÑπÔ∏è  {test_name}: {Colors.BLUE}–ò–ù–§–û–†–ú–ê–¶–ò–Ø{Colors.NC}")
            elif status == 'SKIPPED':
                print(f"‚è≠Ô∏è  {test_name}: {Colors.YELLOW}–ü–†–û–ü–£–©–ï–ù{Colors.NC}")
            elif status == 'AUTH_FAILED':
                print(f"üîê {test_name}: {Colors.RED}–û–®–ò–ë–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò{Colors.NC}")
            elif status == 'CONNECTION_FAILED':
                print(f"üîå {test_name}: {Colors.RED}–û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø{Colors.NC}")
            else:
                print(f"‚ùå {test_name}: {Colors.RED}–û–®–ò–ë–ö–ê{Colors.NC}")

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if success_count < total_count:
            print(f"\n{Colors.YELLOW}üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:{Colors.NC}")

            auth_failures = [r for r in self.test_results if r['status'] == 'AUTH_FAILED']
            if auth_failures:
                print("üîê –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:")
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASS –≤ .env —Ñ–∞–π–ª–µ")
                print("   ‚Ä¢ –î–ª—è Gmail –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
                print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ IMAP/SMTP –¥–æ—Å—Ç—É–ø –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ—á—Ç—ã")

            connection_failures = [r for r in self.test_results if r['status'] == 'CONNECTION_FAILED']
            if connection_failures:
                print("üîå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:")
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SMTP/IMAP –ø–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã")
                print("   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–æ—á—Ç—ã")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ .env
        if success_count >= 2:  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã base connectivity —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"\n{Colors.GREEN}üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û .ENV –§–ê–ô–õ–ê:{Colors.NC}")
            template = self.generate_env_template()

            with open('.env.email_tested', 'w') as f:
                f.write(template)

            log_success("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env.email_tested —Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
            log_info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –≤–∞—à .env —Ñ–∞–π–ª")

        print(f"\n{Colors.PURPLE}üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:{Colors.NC}")
        print("üìß Gmail App Passwords: https://myaccount.google.com/apppasswords")
        print("üìß Outlook IMAP settings: https://support.microsoft.com/office")
        print("üìß Yahoo App Passwords: https://help.yahoo.com/kb/generate-app-password")
        print("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/deployment_guide.md")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Colors.PURPLE}üß™ EMAIL & SMTP COMPREHENSIVE TESTER{Colors.NC}")
    print(f"{Colors.PURPLE}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤{Colors.NC}")
    print(f"{Colors.PURPLE}GitHub: https://github.com/Alexbeo2024/rs-stoplist-project{Colors.NC}")
    print("=" * 60)

    tester = EmailSMTPTester()
    await tester.run_all_tests()

    print(f"\n{Colors.GREEN}‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Colors.NC}")
    print(f"{Colors.BLUE}‚ÑπÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π tester.test_results{Colors.NC}")

if __name__ == "__main__":
    asyncio.run(main())
