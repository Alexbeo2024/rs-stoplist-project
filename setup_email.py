#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import os
import re
from pathlib import Path
import getpass

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    NC = '\033[0m'  # No Color

def log_info(message: str):
    print(f"{Colors.BLUE}[INFO]{Colors.NC} {message}")

def log_success(message: str):
    print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")

def log_warning(message: str):
    print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")

def log_error(message: str):
    print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")

def is_valid_email(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def get_smtp_settings(email: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ SMTP –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ email –¥–æ–º–µ–Ω—É"""
    domain = email.split('@')[1].lower()

    if 'gmail.com' in domain:
        return {
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587,
            'imap_server': 'imap.gmail.com',
            'imap_port': 993,
            'provider': 'Gmail',
            'app_password_required': True,
            'app_password_url': 'https://myaccount.google.com/apppasswords'
        }
    elif 'outlook.com' in domain or 'hotmail.com' in domain or 'live.com' in domain:
        return {
            'smtp_server': 'smtp.live.com',
            'smtp_port': 587,
            'imap_server': 'imap.live.com',
            'imap_port': 993,
            'provider': 'Microsoft Outlook',
            'app_password_required': False,
            'app_password_url': 'https://account.live.com/proofs/manage'
        }
    elif 'yahoo.com' in domain:
        return {
            'smtp_server': 'smtp.mail.yahoo.com',
            'smtp_port': 587,
            'imap_server': 'imap.mail.yahoo.com',
            'imap_port': 993,
            'provider': 'Yahoo Mail',
            'app_password_required': True,
            'app_password_url': 'https://help.yahoo.com/kb/generate-app-password'
        }
    elif 'yandex.ru' in domain or 'yandex.com' in domain:
        return {
            'smtp_server': 'smtp.yandex.ru',
            'smtp_port': 587,
            'imap_server': 'imap.yandex.ru',
            'imap_port': 993,
            'provider': 'Yandex',
            'app_password_required': True,
            'app_password_url': 'https://passport.yandex.ru/profile'
        }
    else:
        return {
            'smtp_server': 'smtp.gmail.com',  # Default
            'smtp_port': 587,
            'imap_server': 'imap.gmail.com',
            'imap_port': 993,
            'provider': 'Custom/Corporate',
            'app_password_required': False,
            'app_password_url': None
        }

def load_current_env():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env"""
    env_vars = {}
    env_file = Path('.env')

    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value

    return env_vars

def save_env_file(env_vars: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ .env —Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–≥–æ .env
    env_file = Path('.env')
    if env_file.exists():
        backup_file = Path('.env.backup')
        with open(env_file, 'r') as src, open(backup_file, 'w') as dst:
            dst.write(src.read())
        log_info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π .env
    with open(env_file, 'w') as f:
        f.write("# =====================================\n")
        f.write("# EMAIL CONFIGURATION\n")
        f.write("# =====================================\n\n")

        # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        email_keys = ['EMAIL_USER', 'EMAIL_PASS', 'SMTP_SERVER', 'SMTP_PORT', 'IMAP_SERVER', 'IMAP_PORT']
        for key in email_keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")

        f.write("\n# =====================================\n")
        f.write("# OTHER CONFIGURATION\n")
        f.write("# =====================================\n\n")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for key, value in env_vars.items():
            if key not in email_keys:
                f.write(f"{key}={value}\n")

    log_success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {env_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print(f"{Colors.CYAN}üìß –ù–ê–°–¢–†–û–ô–ö–ê EMAIL –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò{Colors.NC}")
    print(f"{Colors.CYAN}–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤{Colors.NC}")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    current_env = load_current_env()
    current_email = current_env.get('EMAIL_USER', '')

    if current_email and current_email != 'test@example.com':
        print(f"–¢–µ–∫—É—â–∏–π email: {current_email}")
        use_current = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π email? (y/n): ").lower().strip()
        if use_current == 'y':
            email = current_email
        else:
            email = None
    else:
        email = None

    # –í–≤–æ–¥ email –∞–¥—Ä–µ—Å–∞
    while not email or not is_valid_email(email):
        email = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å: ").strip()
        if not is_valid_email(email):
            log_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    smtp_settings = get_smtp_settings(email)

    print(f"\n{Colors.GREEN}‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {smtp_settings['provider']}{Colors.NC}")
    log_info(f"SMTP: {smtp_settings['smtp_server']}:{smtp_settings['smtp_port']}")
    log_info(f"IMAP: {smtp_settings['imap_server']}:{smtp_settings['imap_port']}")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± App Password –¥–ª—è Gmail/Yahoo
    if smtp_settings['app_password_required']:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  –í–ê–ñ–ù–û: –î–ª—è {smtp_settings['provider']} —Ç—Ä–µ–±—É–µ—Ç—Å—è App Password!{Colors.NC}")
        print(f"1. –í–∫–ª—é—á–∏—Ç–µ 2FA –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞")
        print(f"2. –°–æ–∑–¥–∞–π—Ç–µ App Password: {smtp_settings['app_password_url']}")
        print(f"3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ App Password –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è")
        print()

        proceed = input("–£–∂–µ —Å–æ–∑–¥–∞–ª–∏ App Password? (y/n): ").lower().strip()
        if proceed != 'y':
            log_warning("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ App Password, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
            return

    # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
    password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–∏–ª–∏ App Password): ")
    if not password:
        log_error("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    current_env.update({
        'EMAIL_USER': email,
        'EMAIL_PASS': password,
        'SMTP_SERVER': smtp_settings['smtp_server'],
        'SMTP_PORT': str(smtp_settings['smtp_port']),
        'IMAP_SERVER': smtp_settings['imap_server'],
        'IMAP_PORT': str(smtp_settings['imap_port'])
    })

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if smtp_settings['provider'] == 'Custom/Corporate':
        print(f"\n{Colors.YELLOW}üè¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email{Colors.NC}")
        use_custom = input("–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ custom SMTP/IMAP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏? (y/n): ").lower().strip()

        if use_custom == 'y':
            custom_smtp = input(f"SMTP —Å–µ—Ä–≤–µ—Ä [{smtp_settings['smtp_server']}]: ").strip()
            if custom_smtp:
                current_env['SMTP_SERVER'] = custom_smtp

            custom_smtp_port = input(f"SMTP –ø–æ—Ä—Ç [{smtp_settings['smtp_port']}]: ").strip()
            if custom_smtp_port:
                current_env['SMTP_PORT'] = custom_smtp_port

            custom_imap = input(f"IMAP —Å–µ—Ä–≤–µ—Ä [{smtp_settings['imap_server']}]: ").strip()
            if custom_imap:
                current_env['IMAP_SERVER'] = custom_imap

            custom_imap_port = input(f"IMAP –ø–æ—Ä—Ç [{smtp_settings['imap_port']}]: ").strip()
            if custom_imap_port:
                current_env['IMAP_PORT'] = custom_imap_port

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\n{Colors.BLUE}üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...{Colors.NC}")
    save_env_file(current_env)

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print(f"\n{Colors.PURPLE}üß™ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?{Colors.NC}")
    test_settings = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç email –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è? (y/n): ").lower().strip()

    if test_settings == 'y':
        log_info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ email...")
        os.system("python3 test_email_smtp.py")

    print(f"\n{Colors.GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.NC}")
    print("üìù –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    print("   ‚Ä¢ .env - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ .env.backup - –±—ç–∫–∞–ø –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print()
    print("üîó –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_email_smtp.py")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GitHub —Å–µ–∫—Ä–µ—Ç—ã –¥–ª—è CI/CD")
    print("   3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –Ω–∞ GitHub")

if __name__ == "__main__":
    main()
