#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Jugoexsim email
"""

import asyncio
import sys
import time
import requests
from typing import Dict, Any
import subprocess
import os

def test_basic_connectivity():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")

    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
    try:
        response = requests.get("http://localhost:8000", timeout=5)
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç: HTTP {response.status_code}")
        if response.status_code == 200:
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:100]}...")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (Connection Error)")
        return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é")
        return False

def test_health_endpoints():
    """–¢–µ—Å—Ç health check endpoints"""
    print("\nüíö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")

    endpoints = [
        ("/health/live", "Liveness check"),
        ("/health/ready", "Readiness check"),
        ("/health/detailed", "Detailed health"),
        ("/metrics", "Prometheus metrics")
    ]

    results = {}
    for endpoint, description in endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            print(f"‚úÖ {description}: HTTP {response.status_code}")
            results[endpoint] = response.status_code
        except Exception as e:
            print(f"‚ùå {description}: {e}")
            results[endpoint] = "ERROR"

    return results

def test_docker_containers():
    """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")

    try:
        result = subprocess.run(
            ["docker-compose", "ps", "--format", "table"],
            capture_output=True,
            text=True,
            timeout=10
        )

        if result.returncode == 0:
            print("‚úÖ Docker Compose —Å—Ç–∞—Ç—É—Å:")
            print(result.stdout)
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Docker Compose: {result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def test_database_connectivity():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        response = requests.get("http://localhost:8000/health/detailed", timeout=5)
        if response.status_code == 200:
            health_data = response.json()

            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î –≤ health check
            if 'database' in health_data or 'db' in health_data:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ health check")
                return True
            else:
                print("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ health check")
                return False
        else:
            print(f"‚ùå Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def test_email_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüìß –ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Jugoexsim
    config_files = [
        ".env.jugoexsim_production",
        ".env.jugoexsim_final",
        ".env"
    ]

    config_found = False
    for config_file in config_files:
        if os.path.exists(config_file):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(config_file, 'r') as f:
                content = f.read()
                if 'jugoexsim.rs' in content:
                    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Jugoexsim –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                    config_found = True
                    break

    if not config_found:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Jugoexsim –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_jugoexsim_email.py")
        return False

    print("‚úÖ Email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
    return True

def test_api_documentation():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")

    docs_endpoints = [
        ("/docs", "Swagger UI"),
        ("/redoc", "ReDoc"),
        ("/openapi.json", "OpenAPI Schema")
    ]

    for endpoint, description in docs_endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {description}: –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {description}: HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå {description}: {e}")

def create_test_summary(results: Dict[str, Any]):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)

    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result is True)

    print(f"üìà –£—Å–ø–µ—à–Ω–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤")
    print(f"üìâ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")

    print("\nüîç –î–µ—Ç–∞–ª–∏:")
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")

    if passed_tests == total_tests:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìß Email —Å–∏—Å—Ç–µ–º–∞ Jugoexsim –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É Excel —Ñ–∞–π–ª–æ–≤")
    elif passed_tests >= total_tests * 0.7:
        print(f"\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    else:
        print(f"\n‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

    return passed_tests == total_tests

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (JUGOEXSIM)")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–æ–≤")
    print("Email: aak@jugoexsim.rs")
    print("="*50)

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    test_results = {}

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    test_results["Email Configuration"] = test_email_configuration()
    test_results["Docker Containers"] = test_docker_containers()
    test_results["Basic Connectivity"] = test_basic_connectivity()
    test_results["Health Endpoints"] = bool(test_health_endpoints())
    test_results["Database Connectivity"] = test_database_connectivity()

    # API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    test_api_documentation()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    all_passed = create_test_summary(test_results)

    print(f"\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("üìñ API Docs: http://localhost:8000/docs")
    print("üíö Health Check: http://localhost:8000/health/detailed")
    print("üìä Metrics: http://localhost:8000/metrics")
    print("üìß Test Email: python3 test_jugoexsim_email.py")

    if all_passed:
        print(f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return 0
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return 1

if __name__ == "__main__":
    sys.exit(main())
